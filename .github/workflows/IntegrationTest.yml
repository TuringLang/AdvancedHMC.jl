name: Integration with Turing

on:
  push:
    branches:
      - main
  merge_group:
    types: [checks_requested]
  pull_request:
    branches: [main]
    types: [auto_merge_enabled]

jobs:
  test:
    name: ${{ matrix.package.repo }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - {user: TuringLang, repo: Turing.jl}

    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: 1
      - uses: julia-actions/julia-buildpkg@v1
      - name: Clone Downstream
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.package.user }}/${{ matrix.package.repo }}
          path: downstream
      - name: Load this and run the downstream tests
        shell: julia --color=yes --project=downstream {0}
        run: |
          using Pkg
          try
            # force it to use this PR's version of the package
            Pkg.develop(PackageSpec(path="."))  # resolver may fail with main deps
            Pkg.update()
            Pkg.test(julia_args=["--depwarn=no"])  # resolver may fail with test time deps
          catch err
            err isa Pkg.Resolve.ResolverError || rethrow()
            # If we can't resolve that means this is incompatible by SemVer and this is fine
            # It means we marked this as a breaking change, so we don't need to worry about
            # Mistakenly introducing a breaking change, as we have intentionally made one
            @info "Not compatible with this release. No problem." exception=err
            exit(0)  # Exit immediately, as a success
          end